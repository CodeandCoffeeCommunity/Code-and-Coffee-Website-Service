name: Deploy
description: Deploy code into the specified environment
inputs:
  GOOGLE_CALENDAR_ID:
    description: Google Calendar ID
    required: true
  RANDOM_SEED:
    description: Random seed to use for generating unique names
    required: true
  VITE_ROOT_URL:
    description: Vite root URL
    required: true
  ENVIRONMENT:
    description: Environment
    required: true
  AWS_REGION:
    description: AWS Region
    required: true
  AWS_ACCESS_KEY_ID:
    description: AWS Access Key ID
    required: true
  AWS_SECRET_ACCESS_KEY:
    description: AWS Secret Access Key
    required: true
  ACM_CERTIFICATE_ARN:
    description: ACM Certificate ARN
    required: true
  LAMBDA_ROLE_ARN:
    description: Lambda role ARN
    required: true
  GOOGLE_CALENDAR_API_KEY:
    description: Google Calendar API Key
    required: true

runs:
  using: "composite"
  steps:
    - name: Get current time
      uses: srfrnk/current-time@master
      id: time
      with:
        format: LLLL
    - name: Checkout
      uses: actions/checkout@v2
    - name: Setup node
      uses: actions/setup-node@v1
      with:
        node-version: 14.x
    - name: Get dependencies
      run: npm ci
      shell: bash
    - name: Replace tokens
      uses: cschleiden/replace-tokens@v1
      with:
        tokenPrefix: "##"
        tokenSuffix: "##"
        files: '["**/*.js","**/**/*.js","**/*.json","**/**/*.json","**/*.ts","**/**/*.ts"]'
      env:
        BUILD_NUMBER: ${{ github.run_number }}
        BUILD_DATE: ${{ steps.time.outputs.formattedTime }}
        SHA: ${{ github.sha }}
        REF: ${{ github.ref }}
        GOOGLE_CALENDAR_API_KEY: ${{ inputs.GOOGLE_CALENDAR_API_KEY }}
        GOOGLE_CALENDAR_ID: ${{ inputs.GOOGLE_CALENDAR_ID }}
    - name: Build
      run: npm run build
      shell: bash
      env:
        VITE_ROOT_URL: ${{ inputs.VITE_ROOT_URL }}
    - name: Zip lambda package
      uses: montudor/action-zip@v1
      with:
        args: zip -qq -r ${{ github.sha }}.zip lambda-package/bundle.js
    - name: Execute CloudFormation deployment infrastructure template
      run: aws cloudformation deploy --template-file ./src/infrastructure/deploy.template.yaml --stack-name code-and-coffee-service-deploy-${{ inputs.ENVIRONMENT }} --parameter-overrides RandomSeed=${{ inputs.RANDOM_SEED }} ENVIRONMENT=${{ input.ENVIRONMENT }}
      shell: bash
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.AWS_ACCESS_KEY_ID }}
        AWS_DEFAULT_REGION: ${{ inputs.AWS_REGION }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.AWS_SECRET_ACCESS_KEY }}
    - name: Upload lambda package to S3
      run: aws s3 cp ${{ github.sha }}.zip s3://code-and-coffee-service-deploy-${{ inputs.ENVIRONMENT }}-${{ inputs.RANDOM_SEED }}/${{ github.sha }}.zip
      shell: bash
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.AWS_ACCESS_KEY_ID }}
        AWS_DEFAULT_REGION: ${{ inputs.AWS_REGION }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.AWS_SECRET_ACCESS_KEY }}
    - name: Execute CloudFormation runtime infrastructure template
      run: aws cloudformation deploy --template-file ./src/infrastructure/runtime.template.yaml --stack-name code-and-coffee-service-${{ inputs.ENVIRONMENT }} --parameter-overrides LambdaKey=${{ github.sha }}.zip AcmCertificateArn=${{ inputs.ACM_CERTIFICATE_ARN }} RandomSeed=${{ inputs.RANDOM_SEED }} Environment=${{ input.ENVIRONMENT }} LambdaRoleArn=${{ inputs.LAMBDA_ROLE_ARN }}
      shell: bash
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.AWS_ACCESS_KEY_ID }}
        AWS_DEFAULT_REGION: ${{ inputs.AWS_REGION }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.AWS_SECRET_ACCESS_KEY }}
    - name: Upload dist to web resources bucket
      run: aws s3 sync dist s3://code-and-coffee-service-web-resources-${{ inputs.ENVIRONMENT }}-${{ inputs.RANDOM_SEED }}
      shell: bash
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.AWS_ACCESS_KEY_ID }}
        AWS_DEFAULT_REGION: ${{ inputs.AWS_REGION }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.AWS_SECRET_ACCESS_KEY }}
    - name: Publish SNS topic success
      if: ${{ success() }}
      uses: nothingalike/sns-publish-topic@v1.6
      with:
        MESSAGE: "${{ github.repository }} '${{ github.workflow }}.${{ github.run_number }}' successful"
        TOPIC_ARN: ${{ inputs.SNS_ARN }}
      env:
        AWS_REGION: ${{ inputs.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ inputs.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.AWS_SECRET_ACCESS_KEY }}
    - name: Publish SNS topic failure
      if: ${{ !success() }}
      uses: nothingalike/sns-publish-topic@v1.6
      with:
        MESSAGE: "${{ github.repository }} '${{ github.workflow }}.${{ github.run_number }}' failure"
        TOPIC_ARN: ${{ inputs.SNS_ARN }}
      env:
        AWS_REGION: ${{ inputs.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ inputs.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.AWS_SECRET_ACCESS_KEY }}
